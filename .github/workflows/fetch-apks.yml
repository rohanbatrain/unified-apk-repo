name: Fetch Latest APKs

on:
  schedule:
    - cron: "0 */6 * * *"  # Runs every 6 hours
  workflow_dispatch:

jobs:
  fetch-apks:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Fetch APKs from GitHub Releases (Repo 1)
        run: |
          # Define the first GitHub repository and release tag
          REPO="tanujnotes/Olauncher"  # Replace with the target repository
          TAG="latest"  # Set the tag you want (e.g., "latest" or a version)

          # Get the GitHub release URL for all APK files
          ASSETS=$(curl -s "https://api.github.com/repos/$REPO/releases/tags/$TAG" | jq -r '.assets[] | select(.name | endswith(".apk"))')

          # Download all APKs if valid assets are found
          if [ -n "$ASSETS" ]; then
            echo "Downloading APKs from GitHub release $REPO..."
            echo "$ASSETS" | while IFS= read -r asset; do
              URL=$(echo "$asset" | jq -r '.browser_download_url')
              FILENAME=$(basename "$URL")
              echo "Downloading $FILENAME..."
              curl -L -o "./$FILENAME" "$URL"
            done
          else
            echo "No APKs found in the GitHub release for tag $TAG in $REPO"
          fi

      - name: Fetch APKs from F-Droid (Repo 2)
        run: |
          # Define an array of F-Droid package names
          PACKAGE_NAMES=("com.termux" "org.libreoffice.android")  # Add more package names as needed

          for PACKAGE_NAME in "${PACKAGE_NAMES[@]}"; do
            # Get the latest APK version from F-Droid's JSON API
            VERSION=$(curl -s "https://f-droid.org/api/v1/packages/$PACKAGE_NAME/" | jq -r '.version')

            # Check if a valid version was returned
            if [ -n "$VERSION" ]; then
              echo "Latest version of $PACKAGE_NAME is $VERSION"

              # Construct the APK download URL
              APK_URL="https://f-droid.org/repo/$PACKAGE_NAME-$VERSION.apk"
              FILENAME="$PACKAGE_NAME-$VERSION.apk"
              
              # Download the APK file directly from F-Droid
              curl -L -o "./$FILENAME" "$APK_URL"
            else
              echo "No APK found for package $PACKAGE_NAME on F-Droid"
            fi
          done

      - name: Fetch APKs from GitHub Releases (Repo 3)
        run: |
          # Define another GitHub repository and release tag
          REPO="another/repo"  # Replace with another target GitHub repository
          TAG="latest"  # Set the tag you want (e.g., "latest" or a version)

          # Get the GitHub release URL for all APK files
          ASSETS=$(curl -s "https://api.github.com/repos/$REPO/releases/tags/$TAG" | jq -r '.assets[] | select(.name | endswith(".apk"))')

          # Download all APKs if valid assets are found
          if [ -n "$ASSETS" ]; then
            echo "Downloading APKs from GitHub release $REPO..."
            echo "$ASSETS" | while IFS= read -r asset; do
              URL=$(echo "$asset" | jq -r '.browser_download_url')
              FILENAME=$(basename "$URL")
              echo "Downloading $FILENAME..."
              curl -L -o "./$FILENAME" "$URL"
            done
          else
            echo "No APKs found in the GitHub release for tag $TAG in $REPO"
          fi

      - name: Commit and Push Changes
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add *.apk || true
          if git diff --cached --quiet; then
            echo "No new APKs to commit."
          else
            git commit -m "Update APKs"
            git push
